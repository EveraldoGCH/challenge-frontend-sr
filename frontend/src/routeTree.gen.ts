/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardLayoutRouteImport } from './routes/dashboard/layout'
import { Route as DashboardPageRouteImport } from './routes/dashboard/page'

const IndexRoute = IndexRouteImport.update({
  id: '/index',
  path: '/index',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardLayoutRoute = DashboardLayoutRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardPageRoute = DashboardPageRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/dashboard': typeof DashboardLayoutRouteWithChildren
  '/index': typeof IndexRoute
  '/dashboard/': typeof DashboardPageRoute
}
export interface FileRoutesByTo {
  '/index': typeof IndexRoute
  '/dashboard': typeof DashboardPageRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/dashboard': typeof DashboardLayoutRouteWithChildren
  '/index': typeof IndexRoute
  '/dashboard/': typeof DashboardPageRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/dashboard' | '/index' | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to: '/index' | '/dashboard'
  id: '__root__' | '/dashboard' | '/index' | '/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  DashboardLayoutRoute: typeof DashboardLayoutRouteWithChildren
  IndexRoute: typeof IndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/index': {
      id: '/index'
      path: '/index'
      fullPath: '/index'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardPageRouteImport
      parentRoute: typeof DashboardLayoutRoute
    }
  }
}

interface DashboardLayoutRouteChildren {
  DashboardPageRoute: typeof DashboardPageRoute
}

const DashboardLayoutRouteChildren: DashboardLayoutRouteChildren = {
  DashboardPageRoute: DashboardPageRoute,
}

const DashboardLayoutRouteWithChildren = DashboardLayoutRoute._addFileChildren(
  DashboardLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  DashboardLayoutRoute: DashboardLayoutRouteWithChildren,
  IndexRoute: IndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
